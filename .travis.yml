language: cpp
sudo: required
dist: trusty
notifications:
  on_success: change
  on_failure: always
  on_start: false
cache:
  directories:
    - $HOME/boost

matrix:
  include:
    - os: linux
      env: USE_CC=gcc-4.9 USE_CXX=g++-4.9
      addons: &gcc49
        apt:
          packages:
            - libstdc++-5-dev
          sources:
            - ubuntu-toolchain-r-test
      install:
        - sudo apt-get update -qq
        - sudo apt-get install -qq g++-4.9 gdb

    - os: linux
      env: USE_CC=gcc-5 USE_CXX=g++-5
      addons: &gcc5
        apt:
          packages:
            - g++-5
            - libstdc++-5-dev
          sources:
            - ubuntu-toolchain-r-test
      install:
        - sudo apt-get update -qq
        - sudo apt-get install -qq g++-4.9 gdb

# boost.fiber does not compile with clang 3.5 atm
#    - os: linux
#      env: USE_CC=clang-3.5 USE_CXX=clang++-3.5
#      addons: &clang35
#        apt:
#          packages:
#            - clang-3.5
#          sources:
#            - llvm-toolchain-precise-3.5
#            - ubuntu-toolchain-r-test
#      install:
#        - sudo apt-get update -qq
#        - sudo apt-get install -qq g++-4.9

    - os: linux
      env: USE_CC=clang-3.6 USE_CXX=clang++-3.6
      addons: &clang36
        apt:
          packages:
            - clang-3.6
          sources:
            - llvm-toolchain-precise-3.6
            - ubuntu-toolchain-r-test
      install:
        - sudo apt-get update -qq
        - sudo apt-get install -qq g++-4.9 gdb

before_script:
  # fiber does currently only compile with g++ 4.9
  - export CC=gcc-4.9; export CXX=g++-4.9
  - export BUILD_ROOT=$(pwd)
  - cd $HOME
  - if [ ! -d boost ]; then export BOOST_CLONE=1; git clone --recursive https://github.com/boostorg/boost.git; fi
  - pushd "boost"
  - if [ $BOOST_CLONE -ne 1 ]; then git pull; fi
  - pushd "libs"
  - if [ ! -d fiber ]; then git clone https://github.com/olk/boost-fiber.git fiber; else cd fiber; git pull; cd ..; fi
  - popd
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export GCC=$(which $CXX); fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then echo -e "using gcc \x3a \x3a $GCC ;" > user-config.jam; cat user-config.jam; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then ./bootstrap.sh --prefix=/usr/local/boost_head --with-libraries=fiber,context,thread,date_time,filesystem,system,program_options,test; fi
  - ./b2 -q -d0 --debug-configuration headers
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo ./b2 -q -d0 --user-config=user-config.jam cxxflags="-std=c++11 -fPIC" threading=multi link=static install; fi
  - popd
  - export CC=$USE_CC; export CXX=$USE_CXX
  - curl -L https://github.com/tatsuhiro-t/nghttp2/releases/download/v1.6.0/nghttp2-1.6.0.tar.bz2 | tar xj
  - pushd "nghttp2-1.6.0"
  #- autoreconf -i && automake && autoconf
  - ./configure --with-boost=/usr/local/boost_head --enable-asio-lib
  - sudo make install
  - popd
  - curl http://www.lua.org/ftp/lua-5.3.2.tar.gz | tar xz
  - pushd "lua-5.3.2"
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then make linux CC="$CXX -std=c++11"; fi
  - sudo make install
  - popd
  - cd $BUILD_ROOT
  - export CC=$USE_CC; export CXX=$USE_CXX

script:
  - mkdir build && cd build
  - cmake -DBOOST_ROOT=/usr/local/boost_head ..
  - make
  # tests can be run in gdb to get stack traces using the script below:
  - echo "errors=0; count=0" > runtest.sh
  - echo "for t in test/test_*; do" >> runtest.sh
  - echo "  let count=\$count+1" >> runtest.sh
  - echo "  echo -e \"\nTest \$count (\$t)\"" >> runtest.sh
  - echo "  gdb -batch -ex r -ex bt \$t" >> runtest.sh
  - echo "  let errors=\$errors+\$?" >> runtest.sh
  - echo "done" >> runtest.sh
  - echo "echo -e \"\n\$errors out of \$count tests failed\"" >> runtest.sh
  - echo "if [ \$error -gt 0 ]; then" >> runtest.sh
  - echo "  exit 1" >> runtest.sh
  - echo "fi" >> runtest.sh
  - ctest --output-on-failure || bash runtest.sh && false
